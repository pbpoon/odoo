import re
from odoo import fields, models
from odoo.addons.iap import jsonrpc, InsufficientCreditError
from odoo.addons.crm.models import crm_stage

DEFAULT_ENDPOINT = 'http://localhost:8069'


class CRMLeadRule(models.Model):

    _name = 'crm.lead.rule'
    _description = 'CRM Lead Rules'

    name = fields.Char(string='Rule Name', required=True)
    active = fields.Boolean(default=True)

    # For filters
    country_ids = fields.Many2many('res.country', string='Countries')
    url = fields.Char(string='URL(Regex)')
    company_size_min = fields.Integer(string='Company Size Minimum')
    company_size_max = fields.Integer(string='Company Size Maximum')
    industry_tag_ids = fields.Many2many('reveal.industry.tag', string="Industry Tags")
    preferred_role_id = fields.Many2one('reveal.people.role', string="Preferred Role")
    other_role_ids = fields.Many2many('reveal.people.role', string="Other Roles")
    seniority_id = fields.Many2one('reveal.people.seniority', string="Seniority")

    # Lead / Opportunity Data
    lead_type = fields.Selection([('lead', 'Lead'), ('opportunity', 'Opportunity')], string='Lead Type', required=True, default="opportunity")
    lead_for = fields.Selection([('companies', 'Companies'), ('people', 'People')], string='Lead For', required=True, default="companies")
    team_id = fields.Many2one('crm.team', string='Sales Channel')
    stage_id = fields.Many2one('crm.stage', string='Stage')
    tag_ids = fields.Many2many('crm.lead.tag', string='Tags')
    user_id = fields.Many2one('res.users', string='Salesperson', default=lambda self: self.env.user)
    priority = fields.Selection(crm_stage.AVAILABLE_PRIORITIES, string='Priority')
    lead_ids = fields.Many2many('crm.lead', string="Generated Lead / Opportunity")

    def prepare_rules(self, path):
        active_rules = self.search([['active', '=', True]])
        rules = []
        for active_rule in active_rules:
            try:
                if re.match(active_rule.url, path, re.I | re.M):
                    rules.append(active_rule)
            except Exception as e:
                pass

        return [{
            'rule_id': active_rule.id,
            'lead_for': active_rule.lead_for,
            'countries': [{'name': country.name, 'country_code': country.code} for country in active_rule.country_ids],
            'url': active_rule.url,
            'company_size_min': active_rule.company_size_min,
            'company_size_max': active_rule.company_size_max,
            'industry_tags': [industry_tag.name for industry_tag in active_rule.industry_tag_ids],
            'preferred_role': active_rule.preferred_role_id.name,
            'other_role': [other_role.name for other_role in active_rule.other_role_ids],
            'seniority': active_rule.seniority_id.name,
        } for active_rule in rules]

    def generat_lead(self, responce, ip):
        for data in responce:
            if data['reveal_data']:
                rule = self.search([['id', '=', data['rule_id']]])
                lead_data = {
                    'type': 'opportunity' if rule['lead_type'] == "opportunity" else "lead",
                    'name': 'Lead generated by reveal',
                    'partner_name': data['reveal_data']['company_name'],
                    'phone': data['reveal_data']['phone'],
                    'website': data['reveal_data']['website'],
                    'street': data['reveal_data']['address'],
                    'team_id': rule.team_id.id,
                    'tag_ids': [(6, 0, [tag.id for tag in rule.tag_ids])],
                    'user_id': rule.user_id.id,
                    'priority': rule.priority,
                    'stage_id': rule.stage_id.id,
                    'reveal_ip': ip,
                    'generated_by_reveal': True
                }

                if rule['lead_for'] == 'people' and data['people_data']:
                    lead_data.update({
                        'contact_name': data['people_data']['fullname'],
                        'email_from': data['people_data']['email'],
                        'function': data['people_data']['role'],
                    })
                lead = self.env['crm.lead'].create(lead_data)
                rule.write({
                    'lead_ids': [(4, lead.id)]
                })

    def call_service(self, ip, rules):
        user_token = self.env['iap.account'].get('reveal')
        params = {
            'account_token': user_token.account_token,
            'ip': ip,
            'rules': rules
        }
        endpoint = self.env['ir.config_parameter'].sudo().get_param(
            'reveal.endpoint', DEFAULT_ENDPOINT)
        try:
            return jsonrpc(endpoint + '/reveal', params=params)
        except InsufficientCreditError as e:
            raise e  # Here Send Email to Admin
        except Exception as e:
            pass

        return []

    def test_rule(self, path="/", ip=None):
        if self._check_lead(ip):
            rules = self.prepare_rules(path)
            if len(rules) > 0:
                self.generat_lead(self.call_service(ip, rules), ip)
        return True

    def _check_lead(self, ip):
        return not self.env['crm.lead'].search_count(['&', ('reveal_ip', '=', ip), '|', ('active', '=', True), ('active', '=', False)])


class IndustryTag(models.Model):
    """ Tags of Acquisition Rules """
    _name = 'reveal.industry.tag'
    _description = 'Industry Tag'

    name = fields.Char(string='Tag Name', required=True)
    color = fields.Integer(string='Color Index')

    _sql_constraints = [
        ('name_uniq', 'unique (name)', "Tag name already exists!"),
    ]


class PeopleRole(models.Model):
    """ Roles for People Rules """
    _name = 'reveal.people.role'
    _description = 'People Role'

    name = fields.Char(string='Role Name', required=True)
    color = fields.Integer(string='Color Index')

    _sql_constraints = [
        ('name_uniq', 'unique (name)', "Role name already exists!"),
    ]


class PeopleSeniority(models.Model):
    """ Seniority for People Rules """
    _name = 'reveal.people.seniority'
    _description = 'People Seniority'

    name = fields.Char(string='Name', required=True, translate=True)

    _sql_constraints = [
        ('name_uniq', 'unique (name)', "Name already exists!"),
    ]
